<mxfile host="65bd71144e">
    <diagram id="8f_dUxflPiEJb08nFtdI" name="Page-1">
        <mxGraphModel dx="2048" dy="705" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="&lt;span style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255); display: inline; float: none;&quot;&gt;Complete the following tasks:&lt;/span&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255); display: inline; float: none;&quot;&gt;a. Design a class named StockTransaction that holds a stock symbol (typically one to four characters), stock name, and price per share. Include methods to set and get the values for each data field. Create the class diagram and write the pseudocode that defines the class.&lt;/span&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255); display: inline; float: none;&quot;&gt;b. Design an application that declares two StockTransaction objects and sets and displays their values.&lt;/span&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255); display: inline; float: none;&quot;&gt;c. Design an application that declares an array of 15 StockTransaction objects. Prompt the user for data for each object, and then display all the values.&lt;/span&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255); display: inline; float: none;&quot;&gt;d. Design an application that declares an array of 15 StockTransaction objects. Prompt the user for data for each object, and then pass the array to a method that determines and displays the two stocks with the highest and lowest price per share.&lt;/span&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="50" y="120" width="550" height="250" as="geometry"/>
                </mxCell>
                <mxCell id="4" value="Class StockTransaction&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num price&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private string name&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private string symbol&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public void setSymbol(string sym)&lt;br&gt;&amp;nbsp; &amp;nbsp;symbol = sym&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public void setName(string nam)&lt;br&gt;&amp;nbsp; &amp;nbsp;name = nam&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public void setPrice(num pric)&lt;br&gt;&amp;nbsp; &amp;nbsp;price = pric&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public string getSymbol()&lt;br&gt;&amp;nbsp; &amp;nbsp;return symbol&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public string getName()&lt;br&gt;&amp;nbsp; &amp;nbsp;return name&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public num getPrice()&lt;br&gt;&amp;nbsp; &amp;nbsp;return price" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="350" y="430" width="350" height="390" as="geometry"/>
                </mxCell>
                <mxCell id="5" value="StockTransaction" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry y="430" width="340" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="6" value="symbol : string&lt;br&gt;name : string&lt;br&gt;price : num" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry y="490" width="340" height="90" as="geometry"/>
                </mxCell>
                <mxCell id="7" value="setSymbol( sym : string) : void&lt;br&gt;setName(nam : string) : void&lt;br&gt;setPrice(pric: num) : void&lt;br&gt;getSymbol() : string&lt;br&gt;getName() : string&lt;br&gt;getPrice() : num" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry y="580" width="340" height="130" as="geometry"/>
                </mxCell>
                <mxCell id="8" value="A)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="-40" y="430" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="11" value="" style="edgeStyle=none;html=1;" edge="1" parent="1" source="9">
                    <mxGeometry relative="1" as="geometry">
                        <mxPoint x="750" y="220" as="targetPoint"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="9" value="B)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="675" y="210" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="&amp;nbsp;Start&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; StockTransaction num1&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; StockTransaction num2&lt;br&gt;&amp;nbsp; &amp;nbsp;num1.setSymbol('####')&lt;br&gt;&amp;nbsp; &amp;nbsp;num1.setName('Paper Towel')&lt;br&gt;&amp;nbsp; &amp;nbsp;num1.setPrice(5)&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Symbol &quot;, num1.getSymbol()&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Name &quot;, num1.getName()&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Price $&quot;, num1.getPrice()&lt;br&gt;&amp;nbsp; &amp;nbsp;num2.setSymbol('~~~~')&lt;br&gt;&amp;nbsp; &amp;nbsp;num1.setName('Water&quot;)&lt;br&gt;&amp;nbsp; &amp;nbsp;num1.setPrice(3)&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Symbol &quot;, num1.getSymbol()&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Name &quot;, num1.getName()&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Price $&quot;, num1.getPrice()&lt;br&gt;stop" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="740" y="190" width="280" height="250" as="geometry"/>
                </mxCell>
                <mxCell id="14" value="" style="edgeStyle=none;html=1;entryX=0.003;entryY=0.091;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="12" target="13">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="12" value="C)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="730" y="470" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="13" value="Start&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; StockTransaction num[15]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num sub = 0&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; string sym&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; string nam&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num pric&lt;br&gt;&amp;nbsp; &amp;nbsp;while sub &amp;lt; 15&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter Symbol&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input sym&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter name&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input nam&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter price&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input pric&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num[sub].setSymbol(sym)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num[sub].setName(nam)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num[sub].setPrice(pric)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Symbol &quot;, num[sub].getSymbol()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Name &quot;, num[sub].getName()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Price $&quot;, num[sub].getPrice()&lt;br&gt;&amp;nbsp; &amp;nbsp;endwhile&lt;br&gt;stop" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="780" y="450" width="260" height="340" as="geometry"/>
                </mxCell>
                <mxCell id="15" value="" style="edgeStyle=none;html=1;entryX=-0.005;entryY=0.081;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="16" target="17">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="16" value="D)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="730" y="860" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="17" value="Start&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; StockTransaction num[15]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num sub = 0&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; string sym&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; string nam&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num pric&lt;br&gt;&amp;nbsp; &amp;nbsp;while sub &amp;lt; 15&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter Symbol&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input sym&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter name&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input nam&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter price&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input pric&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num[sub].setSymbol(sym)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num[sub].setName(nam)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num[sub].setPrice(pric)&lt;br&gt;&amp;nbsp; &amp;nbsp;endwhile&lt;br&gt;&amp;nbsp; &amp;nbsp;sortList(num)&lt;br&gt;&amp;nbsp; &amp;nbsp;highLow(num)&lt;br&gt;stop&lt;br&gt;&lt;br&gt;public void sortList(StockTransaction[] list)&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num x = 0&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num y&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num temp&lt;br&gt;&amp;nbsp; &amp;nbsp;while x&amp;lt; 15&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; y = 0&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; while y &amp;lt; 15&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;if list[x].getPrice &amp;gt; list[y].getPrice&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; list[x] = list[x]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;elif list[x].getPrice &amp;lt; list[y].getPrice()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; temp = list[x]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; list[x] = list[y]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; list[y] = temp&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;endif&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;y += 1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; endwhile&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; x+=1&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp;endwhile&lt;br&gt;&lt;br&gt;public void highLow(StockTransaction[] list)&lt;br&gt;&amp;nbsp; &amp;nbsp;list[0].getPrice()&lt;br&gt;&amp;nbsp; &amp;nbsp;list[1].getPrice()&lt;br&gt;&amp;nbsp; &amp;nbsp;list[13].getPrice()&lt;br&gt;&amp;nbsp; &amp;nbsp;list[14].getPrice()&lt;br&gt;return&lt;br&gt;&amp;nbsp; &amp;nbsp;" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="780" y="810" width="260" height="750" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>