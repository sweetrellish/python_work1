<mxfile host="65bd71144e">
    <diagram id="Uz5xF0Y0VlqYDHiW82lS" name="Page-1">
        <mxGraphModel dx="1404" dy="705" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="&lt;ol class=&quot;latin&quot; id=&quot;ZVLHJD4BN6UJK7S3J532&quot; style=&quot;box-sizing: border-box; line-height: 1.8; color: rgb(87, 87, 87); padding: 0px 0px 0px 40px; clear: left; margin: 6px 0px; list-style-type: lower-latin; font-size: 16px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;li id=&quot;FVSYKN7028VQ11F0Q734&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px 0px 10px ; padding: 0px ; list-style: lower-latin&quot;&gt;&lt;p id=&quot;RFHZTXHUUHUAZ1WXX011&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px ; padding: 0px&quot;&gt;Computer games often contain different characters or creatures. For example, you might design a game in which alien beings possess specific characteristics such as color, number of eyes, or number of lives. Create an&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Alien&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;class. Include at least three data fields of your choice. Include a constructor that requires a value for each data field and a method named&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;toString()&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;that returns a string containing a complete description of the&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Alien&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li id=&quot;EYTMNT38F4W173XMM348&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px 0px 10px ; padding: 0px ; list-style: lower-latin&quot;&gt;&lt;p id=&quot;BNTYUVX04J4BXEFJR475&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px ; padding: 0px&quot;&gt;Create two classes—&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Martian&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;and&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Jupiterian&lt;/span&gt;—that descend from&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Alien&lt;/span&gt;. Supply each with a constructor that sets the&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Alien&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;data fields with values you choose. For example, you can decide that a&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Martian&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;has four eyes but a&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Jupiterian&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;has only two.&lt;/p&gt;&lt;/li&gt;&lt;li id=&quot;MGEHN1TTWA2G2Y6FY408&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px 0px 10px ; padding: 0px ; list-style: lower-latin&quot;&gt;&lt;p id=&quot;PSSDTB2EUFM41R87Z846&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px ; padding: 0px&quot;&gt;Create an application that instantiates one&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Martian&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;and one&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Jupiterian&lt;/span&gt;. Call the&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;toString()&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;method with each object and display the results.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
                    <mxGeometry x="70" y="120" width="550" height="440" as="geometry"/>
                </mxCell>
                <mxCell id="6" value="" style="edgeStyle=none;html=1;" edge="1" parent="1" source="3" target="5">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="3" value="A)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="40" y="780" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="5" value="Class Alien&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private string color&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num arms&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num lives&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public Alien(string colors, num arm, num life)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; color = colors&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; arms = arm&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; lives = life&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public string toString()&lt;br&gt;&amp;nbsp; &amp;nbsp;string alien = &quot;Color :&quot;, color, &quot;Arms:&quot;, arms, &quot;Lives:&quot;, lives&lt;br&gt;&amp;nbsp; &amp;nbsp;return alien&lt;br&gt;&amp;nbsp; &amp;nbsp;" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="100" y="665" width="320" height="250" as="geometry"/>
                </mxCell>
                <mxCell id="7" value="" style="edgeStyle=none;html=1;" edge="1" parent="1" source="8" target="9">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="8" value="B)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="420" y="780" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="9" value="Class Martian inheritsFrom Alien&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private string color&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num arms&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num lives&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public Martian(string colors, num arm =3, num life)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; color = colors&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; arms = arm&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; lives = life&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public string toString()&lt;br&gt;&amp;nbsp; &amp;nbsp;string alien = &quot;Color :&quot;, color, &quot;Arms:&quot;, arms, &quot;Lives:&quot;, lives&lt;br&gt;&amp;nbsp; &amp;nbsp;return alien&lt;br&gt;&lt;br&gt;Class Juptierian inheritsFrom Alien&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private string color&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num arms&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num lives&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public Jupiterian(string colors = 'red', num arm, num life)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; color = colors&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; arms = arm&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; lives = life&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public string toString()&lt;br&gt;&amp;nbsp; &amp;nbsp;string alien = &quot;Color :&quot;, color, &quot;Arms:&quot;, arms, &quot;Lives:&quot;, lives&lt;br&gt;&amp;nbsp; &amp;nbsp;return alien&lt;br&gt;&amp;nbsp; &amp;nbsp;" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="480" y="550" width="320" height="480" as="geometry"/>
                </mxCell>
                <mxCell id="12" value="" style="edgeStyle=none;html=1;" edge="1" parent="1" source="10" target="11">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="C)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="630" y="440" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="11" value="Start&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Martian alien1('green', 4)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Jupiterian alien2(3, 5)&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;alien1.toString()&lt;br&gt;&amp;nbsp; &amp;nbsp;alien2.toString()&lt;br&gt;&lt;br&gt;Stop" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="680" y="370" width="200" height="160" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>