<mxfile host="65bd71144e">
    <diagram id="iFZ6_NAZeNE8iqpGFZ3q" name="Page-1">
        <mxGraphModel dx="2048" dy="705" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="&lt;span style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255); display: inline; float: none;&quot;&gt;Complete the following tasks:&lt;/span&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255); display: inline; float: none;&quot;&gt;a. Design a class named BaseballGame that has fields for two team names and a final score for each team. Include methods to set and get the values for each data field. Create the class diagram and write the pseudocode that defines the class.&lt;/span&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255); display: inline; float: none;&quot;&gt;b. Design an application that declares three BaseballGame objects and sets and displays their values.&lt;/span&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: georgia, times, &amp;quot;times new roman&amp;quot;, serif; font-size: 14px; font-style: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255); display: inline; float: none;&quot;&gt;c. Design an application that declares an array of 12 BaseballGame objects. Prompt the user for data for each object, and display all the values. Then pass each object to a method that displays the name of the winning team or &quot;Tie&quot; if the score is a tie.&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="50" y="80" width="550" height="190" as="geometry"/>
                </mxCell>
                <mxCell id="3" value="Class BaseBallGame&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num score1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num score2&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private string team1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private string team2&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public void setTeam1(string tem1)&lt;br&gt;&amp;nbsp; &amp;nbsp;team1 = tem1&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public void setTeam2(string tem2)&lt;br&gt;&amp;nbsp; &amp;nbsp;team2 = tem2&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public void setScore1(num sco1)&lt;br&gt;&amp;nbsp; &amp;nbsp;score1 = sco1&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public void setScore2(num sco2)&lt;br&gt;&amp;nbsp; &amp;nbsp;score2 = sco2&lt;br&gt;&amp;nbsp; &amp;nbsp;return&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public string getTeam1()&lt;br&gt;&amp;nbsp; &amp;nbsp;return team1&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public string getTeam2()&lt;br&gt;&amp;nbsp; &amp;nbsp;return team2&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public num getScore1()&lt;br&gt;&amp;nbsp; &amp;nbsp;return score1&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public num getScore2()&lt;br&gt;&amp;nbsp; &amp;nbsp;return score2" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="320" y="330" width="350" height="520" as="geometry"/>
                </mxCell>
                <mxCell id="4" value="BaseBallGame" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="-30" y="330" width="340" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="5" value="team1 : string&lt;br&gt;team2 : string&lt;br&gt;score1 : num&lt;br&gt;score2 : num" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="-30" y="390" width="340" height="90" as="geometry"/>
                </mxCell>
                <mxCell id="6" value="setTeam1( tem1 : string) : void&lt;br&gt;setTeam2(tem2 : string) : void&lt;br&gt;setScore1(sco1: num) : void&lt;br&gt;setScore2(sco2: num) : void&lt;br&gt;getTeam1() : string&lt;br&gt;getTeam2() : string&lt;br&gt;getScore1() : num&lt;br&gt;getScore2() : num" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="-30" y="480" width="340" height="130" as="geometry"/>
                </mxCell>
                <mxCell id="7" value="A)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="-70" y="330" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="" style="edgeStyle=none;html=1;entryX=-0.019;entryY=0.064;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="8" target="9">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="8" value="B)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="675" y="110" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="9" value="Start&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; BaseBallGame game1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; BaseBallGame game2&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; BaseBallGame game3&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;game1.setTeam1(&quot;Bears&quot;)&lt;br&gt;&amp;nbsp; &amp;nbsp;game1.setTeam2(&quot;Indians&quot;)&lt;br&gt;&amp;nbsp; &amp;nbsp;game1.setScore1(10)&lt;br&gt;&amp;nbsp; &amp;nbsp;game1.setScore2(25)&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Teams &quot;, game1.getTeam1(),&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;game1.getTeam2()&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Scores &quot;, game1.getScore1(),&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;game1.getScore2()&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;game2.setTeam1(&quot;Chiefs&quot;)&lt;br&gt;&amp;nbsp; &amp;nbsp;game2.setTeam2(&quot;Raptors&quot;)&lt;br&gt;&amp;nbsp; &amp;nbsp;game2.setScore1(15)&lt;br&gt;&amp;nbsp; &amp;nbsp;game2.setScore2(27)&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Teams &quot;, game2.getTeam1(),&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;game2.getTeam2()&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Scores &quot;, game2.getScore1(),&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;game2.getScore2()&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;game3.setTeam1(&quot;Tigers&quot;)&lt;br&gt;&amp;nbsp; &amp;nbsp;game3.setTeam2(&quot;Boars&quot;)&lt;br&gt;&amp;nbsp; &amp;nbsp;game3.setScore1(1)&lt;br&gt;&amp;nbsp; &amp;nbsp;game3.setScore2(10)&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Teams &quot;, game3.getTeam1(),&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;game3.getTeam2()&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Scores &quot;, game3.getScore1(),&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;game3.getScore2()&lt;br&gt;Stop" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="750" y="90" width="240" height="500" as="geometry"/>
                </mxCell>
                <mxCell id="13" value="" style="edgeStyle=none;html=1;" edge="1" parent="1" source="11">
                    <mxGeometry relative="1" as="geometry">
                        <mxPoint x="740" y="640" as="targetPoint"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="11" value="C)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="675" y="630" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="12" value="Start&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; BaseBallGame game[12]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num sub = 0&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; string team 1&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; string team 2&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num score1&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num score2&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;while sub &amp;lt; 12&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter team 1&quot;&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input team1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter team 2&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input team2&amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter score for team 1&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input score1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Enter score for team 2&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; input score2&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; game[sub].setTeam1(team1)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; game[sub].setTeam2(team2)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; game[sub].setScore1(score1)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; game[sub].setScore2(score2)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Teams &quot;,&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; game[sub].getTeam1(),&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; game[sub].getTeam2()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; output &quot;Scores &quot;,&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; game[sub].getScore1(),&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; game[sub].getScore2()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; highScore(game[sub])&lt;br&gt;&amp;nbsp; &amp;nbsp;endwhile&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;public void highScore(BaseBallGame list)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if list.getScore1() &amp;gt; list.getScore2() then&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output &quot;Winning team &quot; list.getTeam1()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; elif list.getScore1() &amp;lt; list.getScore2()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output &quot;Winning team &quot; list.getTeam2()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; elif list.getScore1() == list.getScore2()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output &quot;Tie Game!&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp;return" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="750" y="610" width="240" height="600" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>