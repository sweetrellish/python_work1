<mxfile host="65bd71144e">
    <diagram id="3_ig2Wk-cDRCy3DhNArJ" name="Page-1">
        <mxGraphModel dx="1028" dy="705" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="&lt;ol id=&quot;EMHMWY8PGH2FSEJ0B737&quot; class=&quot;latin mtsubitem&quot; style=&quot;box-sizing: border-box; line-height: 1.8; color: rgb(87, 87, 87); padding: 0px 0px 0px 40px; clear: left; margin: 6px 0px; list-style-type: lower-latin; font-size: 16px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;li id=&quot;HBYQU25U1J0DE0ZSU589&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px 0px 10px ; padding: 0px ; list-style: lower-latin&quot;&gt;&lt;p id=&quot;TVUUEE5KCLW8DT744526&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px ; padding: 0px&quot;&gt;Playing cards are used in many computer games, including versions of such classics as Solitaire, Hearts, and Poker. Design a&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Card&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;class that contains a string data field to hold a suit (spades, hearts, diamonds, or clubs) and a numeric data field for a value from 1 to 13. Include get and set methods for each field. Write an application that randomly selects two playing cards and displays their values.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="50" y="110" width="550" height="210" as="geometry"/>
                </mxCell>
                <mxCell id="3" value="&lt;ol id=&quot;EMHMWY8PGH2FSEJ0B737&quot; class=&quot;latin mtsubitem&quot; style=&quot;box-sizing: border-box; line-height: 1.8; color: rgb(87, 87, 87); padding: 0px 0px 0px 40px; clear: left; margin: 6px 0px; list-style-type: lower-latin; font-size: 16px; font-style: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; word-spacing: 0px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;li id=&quot;LYMQVJCHEQ1TFV5DW320&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px 0px 10px ; padding: 0px ; list-style: lower-latin&quot;&gt;&lt;p id=&quot;YCKQYSR4CP1SGVBZ4124&quot; style=&quot;box-sizing: border-box ; font-family: , &amp;quot;cambria&amp;quot; , &amp;quot;times new roman&amp;quot; , &amp;quot;times&amp;quot; , serif ; line-height: 1.6 ; color: rgb(87 , 87 , 87) ; margin: 0px ; padding: 0px&quot;&gt;Using two&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Card&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;objects, design an application that plays a simple version of the card game War. Deal two&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Card&lt;/span&gt;sâ€”one for the computer and one for the player. Determine the higher card, then display a message indicating whether the cards are equal, the computer won, or the player won. (Playing cards are considered equal when they have the same value, no matter what their suit is.) For this game, assume that the Ace (value 1) is low. Make sure that the two&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Card&lt;/span&gt;s dealt are not the same&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;monofont&quot; style=&quot;box-sizing: border-box ; font-family: &amp;quot;andale mono&amp;quot; , &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; ; font-size: 15.36px&quot;&gt;Card&lt;/span&gt;. For example, a deck cannot contain more than one Queen of Spades.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
                    <mxGeometry x="70" y="320" width="550" height="260" as="geometry"/>
                </mxCell>
                <mxCell id="6" value="" style="edgeStyle=none;html=1;" edge="1" parent="1" source="4">
                    <mxGeometry relative="1" as="geometry">
                        <mxPoint x="750" y="90" as="targetPoint"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="4" value="A)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="695" y="80" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="5" value="Class Card&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private string suits[3] = &quot;hearts&quot;, &quot;diamonds&quot;, &quot;clubs&quot;, &quot;spades&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num numbers[12] = 1,2,3,4,5,6,7,8,9,10,11,12,13&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private string suit&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; private num number&lt;br&gt;&lt;br&gt;public void setSuit(num type)&lt;br&gt;&amp;nbsp; &amp;nbsp;suit = suits[type]&lt;br&gt;return&amp;nbsp;&lt;br&gt;&lt;br&gt;public void setNumber(num numb)&lt;br&gt;&amp;nbsp; &amp;nbsp;number = numb&lt;br&gt;return&lt;br&gt;&lt;br&gt;public string getSuit()&lt;br&gt;return suit&lt;br&gt;&lt;br&gt;public num getNumber()&lt;br&gt;return number" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="760" y="60" width="440" height="370" as="geometry"/>
                </mxCell>
                <mxCell id="9" value="" style="edgeStyle=none;html=1;entryX=-0.015;entryY=0.101;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="7">
                    <mxGeometry relative="1" as="geometry">
                        <mxPoint x="756.0999999999999" y="480.29999999999995" as="targetPoint"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="7" value="B)" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="695" y="470" width="30" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="Start&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Card card1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Card card2&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num randomNumber1 = random(12)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num randomNumber2 = random(3)&lt;br&gt;&amp;nbsp; &amp;nbsp;card1.setSuit(randomNumber2)&lt;br&gt;&amp;nbsp; &amp;nbsp;card1.setNumber(randomNumber1)&lt;br&gt;&amp;nbsp; &amp;nbsp;card2.setSuit(randomNumber2)&lt;br&gt;&amp;nbsp; &amp;nbsp;card2.setNumber(randomNumber1)&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Card 1:&quot;, card1.getNumber(), card1.getSuit()&lt;br&gt;&amp;nbsp; &amp;nbsp;output &quot;Card 2:&quot;, card2.getNumber(), card2.getSuit()&lt;br&gt;&lt;br&gt;Stop" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="1210" y="60" width="320" height="370" as="geometry"/>
                </mxCell>
                <mxCell id="11" value="Start&lt;br&gt;&amp;nbsp; &amp;nbsp;Declarations&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Card player&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; Card comp&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num x = 0&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num randomNumber1 = random(12)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; num randomNumber2 = random(3)&lt;br&gt;&amp;nbsp; &amp;nbsp;player.setSuit(randomNumber2)&lt;br&gt;&amp;nbsp; &amp;nbsp;player.setNumber(randomNumber1)&lt;br&gt;&amp;nbsp; &amp;nbsp;comp.setSuit(randomNumber2)&lt;br&gt;&amp;nbsp; &amp;nbsp;comp.setNumber(randomNumber1)&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp;while x &amp;lt; 12&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; if player.getNumber() &amp;gt; comp.getNumber() then&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output &quot;Player wins&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;break&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; elif player.getNumber() &amp;lt; comp.getNumber() then&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output &quot;Computer wins&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;break&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; elif player.getNumber() == comp.getNumber() then&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output &quot;Tie&quot;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;break&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; elif player.getNumber() == comp.getNumber() AND player.getSuit() == comp.getSuit()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;num randomNumber1 = random(12)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;num randomNumber2 = random(3)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;player.setSuit(randomNumber2)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;player.setNumber(randomNumber1)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;comp.setSuit(randomNumber2)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;comp.setNumber(randomNumber1)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;x += 1&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; endif&lt;br&gt;&amp;nbsp; &amp;nbsp;endwhile&lt;br&gt;Stop" style="whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
                    <mxGeometry x="760" y="460" width="590" height="480" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>